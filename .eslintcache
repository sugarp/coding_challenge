[{"/Users/petrsugar/git/coding_challenge/src/index.tsx":"1","/Users/petrsugar/git/coding_challenge/src/App.tsx":"2","/Users/petrsugar/git/coding_challenge/src/generator/index.ts":"3","/Users/petrsugar/git/coding_challenge/src/generator/constants/names.ts":"4","/Users/petrsugar/git/coding_challenge/src/constants/index.ts":"5","/Users/petrsugar/git/coding_challenge/src/components/Event.tsx":"6","/Users/petrsugar/git/coding_challenge/src/components/TimeLine/TimeLine.tsx":"7","/Users/petrsugar/git/coding_challenge/src/components/TimeLine/index.ts":"8","/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/index.ts":"9","/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/SelectedTimeContext.ts":"10","/Users/petrsugar/git/coding_challenge/src/contexts/EventsContext/EventsContext.tsx":"11","/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/SelectedTimeContextProvider.tsx":"12","/Users/petrsugar/git/coding_challenge/src/contexts/EventsContext/EventsContextProvider.tsx":"13","/Users/petrsugar/git/coding_challenge/src/components/SelectedTime/SelectedTime.tsx":"14","/Users/petrsugar/git/coding_challenge/src/components/ControlsBar/ControlsBar.tsx":"15","/Users/petrsugar/git/coding_challenge/src/generator/utils/calculateWidth.ts":"16","/Users/petrsugar/git/coding_challenge/src/components/ControlsBar/hooks/useControlBar.tsx":"17","/Users/petrsugar/git/coding_challenge/src/generator/utils/time.ts":"18","/Users/petrsugar/git/coding_challenge/src/generator/utils/randomInt.ts":"19","/Users/petrsugar/git/coding_challenge/src/generator/utils/generateGuid.ts":"20","/Users/petrsugar/git/coding_challenge/src/components/Loader.tsx":"21","/Users/petrsugar/git/coding_challenge/src/components/TimeLine/utils/index.ts":"22","/Users/petrsugar/git/coding_challenge/src/api/fetchEvents.ts":"23","/Users/petrsugar/git/coding_challenge/src/utils/index.ts":"24"},{"size":219,"mtime":1611829055933,"results":"25","hashOfConfig":"26"},{"size":1504,"mtime":1611834254512,"results":"27","hashOfConfig":"26"},{"size":1052,"mtime":1611830165605,"results":"28","hashOfConfig":"26"},{"size":982,"mtime":1610976427353,"results":"29","hashOfConfig":"26"},{"size":39,"mtime":1611829453640,"results":"30","hashOfConfig":"26"},{"size":1047,"mtime":1611841587918,"results":"31","hashOfConfig":"26"},{"size":1570,"mtime":1611844882579,"results":"32","hashOfConfig":"26"},{"size":37,"mtime":1611829469536,"results":"33","hashOfConfig":"26"},{"size":48,"mtime":1611736271245,"results":"34","hashOfConfig":"26"},{"size":429,"mtime":1611756398790,"results":"35","hashOfConfig":"26"},{"size":507,"mtime":1637939575566,"results":"36","hashOfConfig":"26"},{"size":938,"mtime":1611824345354,"results":"37","hashOfConfig":"26"},{"size":1382,"mtime":1637939705765,"results":"38","hashOfConfig":"26"},{"size":1443,"mtime":1611841587919,"results":"39","hashOfConfig":"26"},{"size":2441,"mtime":1611841408747,"results":"40","hashOfConfig":"26"},{"size":298,"mtime":1611829867308,"results":"41","hashOfConfig":"26"},{"size":1590,"mtime":1611844824583,"results":"42","hashOfConfig":"26"},{"size":318,"mtime":1611829282687,"results":"43","hashOfConfig":"26"},{"size":137,"mtime":1611829453640,"results":"44","hashOfConfig":"26"},{"size":244,"mtime":1611829207835,"results":"45","hashOfConfig":"26"},{"size":912,"mtime":1611834195272,"results":"46","hashOfConfig":"26"},{"size":832,"mtime":1611838982823,"results":"47","hashOfConfig":"26"},{"size":299,"mtime":1637939686641,"results":"48","hashOfConfig":"26"},{"size":1072,"mtime":1611841586847,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"6i0evy",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/petrsugar/git/coding_challenge/src/index.tsx",[],["105","106"],"/Users/petrsugar/git/coding_challenge/src/App.tsx",["107"],"import React, { useContext, useMemo } from 'react';\nimport { generateEvents } from './generator';\nimport Event from './components/Event'\nimport Timeline from './components/TimeLine';\nimport { withEventsProvider } from './contexts/EventsContext/EventsContextProvider';\nimport { withSelectedTimeContextProvider } from './contexts/SelectedTimeContext/SelectedTimeContextProvider';\nimport SelectedTime from './components/SelectedTime/SelectedTime';\nimport { DateTime } from 'luxon';\nimport EventsContext from './contexts/EventsContext/EventsContext';\nimport ControlsBar from './components/ControlsBar/ControlsBar';\nimport styled from 'styled-components';\nimport Loader from './components/Loader';\n\nconst Root = styled.div`\n  padding: 2rem;\n`;\n\nconst StyledControlBar = styled(ControlsBar)`\n  margin: 2rem 0;\n`;\n\nfunction App() {\n  const { events, loading } = useContext(EventsContext);\n  const timeLineStart = useMemo(() => DateTime.local().set({ minute: 0, hour: 0, second: 0, millisecond: 0 }), []);\n\n  return (\n    <Root className=\"App\">\n      <StyledControlBar timeLineStart={timeLineStart}/>      \n      <Timeline timeLineStart={timeLineStart}>        \n        <Loader loading={loading} />\n        <SelectedTime timeLineStart={timeLineStart} />\n        {\n          events.map(item => (\n            <Event key={item.id} item={item} timeLineStart={timeLineStart}/>\n          ))\n        }      \n      </Timeline>\n    </Root>\n  );\n}\n\nexport default withSelectedTimeContextProvider(withEventsProvider(App));\n","/Users/petrsugar/git/coding_challenge/src/generator/index.ts",[],"/Users/petrsugar/git/coding_challenge/src/generator/constants/names.ts",[],"/Users/petrsugar/git/coding_challenge/src/constants/index.ts",[],"/Users/petrsugar/git/coding_challenge/src/components/Event.tsx",["108","109","110"],"import { DateTime } from \"luxon\";\nimport styled from \"styled-components\"\nimport { MINUTE_TO_PIXEL_RATIO as MINUTE_TO_PIXEL_RATIO } from \"../constants\";\nimport { msToMin } from \"../generator/utils/time\";\nimport { TimeEvent } from \"../types/TimeEvent\";\nimport { calculateLeftValue, calculateWidthValue } from \"../utils\";\n\ninterface Props {\n  timeLineStart: DateTime;\n  item: TimeEvent;\n}\n\nconst Root = styled.div<{ left: number, width: number }>`\n  position: absolute;\n  left: ${({left}) => left}px;\n  width: ${({width}) => width}px;\n  height: 80px;\n  border: 1px solid;\n  box-sizing: border-box;\n  top: 50%;\n  margin-top: -40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Event: React.FC<Props> = ({ timeLineStart, item }) => {\n  const { start, end, name } = item;\n\n  const left = calculateLeftValue(timeLineStart, DateTime.fromISO(start))\n  const width = calculateWidthValue(DateTime.fromISO(start), DateTime.fromISO(end))\n\n  return (\n    <Root left={left} width={width}>{name}</Root>\n  )\n}\n\nexport default Event;","/Users/petrsugar/git/coding_challenge/src/components/TimeLine/TimeLine.tsx",["111","112","113","114"],"import React, { useCallback, useContext, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport EventsContext from '../../contexts/EventsContext/EventsContext';\nimport calculateWidth from '../../generator/utils/calculateWidth';\nimport { last, first } from 'lodash';\nimport SelectedTimeContext from '../../contexts/SelectedTimeContext';\nimport { DateTime } from 'luxon';\nimport { MINUTE_TO_PIXEL_RATIO } from '../../constants';\nimport calculateNewInterval from './utils';\n\ninterface RootProps {\n  width: number;\n}\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow-x: auto;\n`;\n\nconst Content = styled.div<RootProps>`\n  position: relative;\n  height: 100px;\n  background: #f0f0f0;\n  width: ${({width}) => width}px;\n`;\n\ninterface TimeLineProps {\n  timeLineStart: DateTime;\n}\n\nconst TimeLine: React.FC<TimeLineProps> = ({ children, timeLineStart }) => {\n  const { events } = useContext(EventsContext);\n  const selectedTime = useContext(SelectedTimeContext);\n  const width = calculateWidth(timeLineStart, DateTime.fromISO(last(events)?.end ?? \"\"));\n  const contentRef = useRef<HTMLDivElement| null>(null);\n\n  const onClick = useCallback((e: React.MouseEvent) => {\n    const { start, end } = calculateNewInterval(timeLineStart, selectedTime.start, selectedTime.end, contentRef.current!, e.clientX);\n\n    selectedTime.setStart(start);\n    selectedTime.setEnd(end);\n  }, [selectedTime])\n\n  return (\n    <Root>\n      <Content ref={contentRef} width={width} onClick={onClick}>{children}</Content>\n    </Root>\n  )\n}\n\nexport default TimeLine;","/Users/petrsugar/git/coding_challenge/src/components/TimeLine/index.ts",[],"/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/index.ts",[],"/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/SelectedTimeContext.ts",[],"/Users/petrsugar/git/coding_challenge/src/contexts/EventsContext/EventsContext.tsx",[],"/Users/petrsugar/git/coding_challenge/src/contexts/SelectedTimeContext/SelectedTimeContextProvider.tsx",[],"/Users/petrsugar/git/coding_challenge/src/contexts/EventsContext/EventsContextProvider.tsx",[],"/Users/petrsugar/git/coding_challenge/src/components/SelectedTime/SelectedTime.tsx",["115"],"import { DateTime } from \"luxon\";\nimport { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { MINUTE_TO_PIXEL_RATIO } from \"../../constants\";\nimport EventsContext from \"../../contexts/EventsContext/EventsContext\";\nimport SelectedTimeContext from \"../../contexts/SelectedTimeContext\";\nimport { calculateLeftValue, calculateWidthValue, isIntervalFree } from \"../../utils\";\n\ninterface RootProps {\n  left: number;\n  width: number;\n  free: boolean;\n}\n\nconst Root = styled.div<RootProps>`\n  position: absolute;\n  height: 100%;\n  border-left: 5px solid #585858;\n  border-right: 5px solid #585858;\n  width: ${({ width }) => width}px;\n  left: ${({ left }) => left}px;\n  background:${({ free }) => free ? \"#4CAF50\" : \"#f44336b8\"};\n  z-index: 1;\n  transition: all 170ms ease-in;\n  box-sizing: border-box;\n`;\n\ninterface SelectedTimeProps {\n  timeLineStart: DateTime;\n}\n\nconst SelectedTime: React.FC<SelectedTimeProps> = ({ timeLineStart }) => {\n  const eventsContext = useContext(EventsContext);\n  const selectedTimeContext = useContext(SelectedTimeContext);\n  const left = calculateLeftValue(timeLineStart, selectedTimeContext.start);\n  const width = calculateWidthValue(selectedTimeContext.start, selectedTimeContext.end);\n  const free = isIntervalFree(eventsContext.events, selectedTimeContext.start, selectedTimeContext.end);\n  \n  return (\n    <Root left={left} width={width} free={free}/>\n  )\n};\n\nexport default SelectedTime;","/Users/petrsugar/git/coding_challenge/src/components/ControlsBar/ControlsBar.tsx",["116","117","118"],"import { Button, FormControl, InputLabel, MenuItem } from '@material-ui/core';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { DateTime } from 'luxon';\nimport React, { HTMLAttributes, useCallback, useContext } from 'react'\nimport styled from 'styled-components';\nimport useControlsBar from './hooks/useControlBar';\nimport Datetime from 'react-datetime';\nimport \"react-datetime/css/react-datetime.css\";\nimport { isEmpty } from 'lodash';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledOrganizerField = styled(FormControl)`\n  && {\n    min-width: 200px;\n  }\n`;\n\nconst StyledDateTimeFormControl = styled(FormControl)`\n  && {\n    min-width: 200px;\n\n    .MuiFormLabel-root {\n      flex: 1;\n      position: relative;\n    }\n\n    input {\n      border: none;\n      border-bottom: 1px solid;\n      padding-bottom: 6px;\n    }\n  }\n`;\n\nconst StyledResetButton = styled(Button)`\n  && {\n    margin-left: 1rem;\n  }\n`;\n\ninterface ControlBarProps extends HTMLAttributes<HTMLDivElement> {\n  timeLineStart: DateTime;\n}\n\nconst ControlsBar: React.FC<ControlBarProps> = ({ timeLineStart, ...props }) => {\n  const { start, end, nameFilterOptions, nameFilterValue, onEndChange, onFilterChange, onStartChange } = useControlsBar();\n\n  return (\n    <Root {...props}>\n      <StyledDateTimeFormControl>\n        <InputLabel shrink>Start</InputLabel>\n        <Datetime\n          value={start.toJSDate()}\n          onChange={onStartChange}\n        />\n      </StyledDateTimeFormControl>\n\n      <StyledDateTimeFormControl>\n        <InputLabel shrink>End</InputLabel>\n        <Datetime\n          value={end.toJSDate()}\n          onChange={onEndChange}\n        />\n      </StyledDateTimeFormControl>\n\n      <StyledOrganizerField>\n        <InputLabel shrink>Organizer</InputLabel>\n        <Select\n          value={nameFilterValue}\n          onChange={(e) => { onFilterChange(e.target.value as string)}}\n        >\n          {nameFilterOptions.map((name) => <MenuItem key={name} value={name}>{name}</MenuItem>)}\n        </Select>\n      </StyledOrganizerField>\n      \n      { !isEmpty(nameFilterValue) ? (\n        <StyledResetButton \n          variant=\"contained\" \n          color={\"primary\"} \n          onClick={() => onFilterChange(null)}\n        >\n          Delete filter\n        </StyledResetButton>\n      ) : null}\n    </Root>\n  )\n}\n\nexport default ControlsBar\n","/Users/petrsugar/git/coding_challenge/src/generator/utils/calculateWidth.ts",[],"/Users/petrsugar/git/coding_challenge/src/components/ControlsBar/hooks/useControlBar.tsx",["119","120"],"import { isEmpty, last } from \"lodash\";\nimport { DateTime } from \"luxon\";\nimport { Moment } from \"moment\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport EventsContext from \"../../../contexts/EventsContext/EventsContext\";\nimport SelectedTimeContext from \"../../../contexts/SelectedTimeContext\";\ninterface Response {\n  start: DateTime,\n  end: DateTime,\n  nameFilterValue: null | string;\n  nameFilterOptions: Array<string>;\n  onStartChange: (value: Moment | string) => void;\n  onEndChange: (value: Moment | string) => void;\n  onFilterChange: (value: string | null) => void;\n}\n\nfunction useControlsBar(): Response {\n  const [nameFilterValue, setNameFilterValue] = useState<string | null>(null);\n  const { filterEventsByName, organizers } = useContext(EventsContext);\n  const { setEnd, setStart, start, end } = useContext(SelectedTimeContext);\n\n  const onStartChange = useCallback((value: Moment | string) => {\n    setStart(DateTime.fromISO((value as Moment).toISOString()));\n  }, [setStart]);\n\n  const onEndChange = useCallback((value: Moment | string) => {\n    setEnd(DateTime.fromISO((value as Moment).toISOString()));\n  }, [setEnd]);\n\n  const onFilterChange = useCallback((value: string | null) => {\n    setNameFilterValue(value);\n  }, [setNameFilterValue]);\n\n  useEffect(() => {\n    filterEventsByName(isEmpty(nameFilterValue) ? null : nameFilterValue);\n  }, [nameFilterValue]);\n\n  return {\n    start,\n    end,\n    nameFilterValue,\n    nameFilterOptions: organizers,\n    onStartChange,\n    onEndChange,\n    onFilterChange\n  }\n}\n\nexport default useControlsBar;","/Users/petrsugar/git/coding_challenge/src/generator/utils/time.ts",[],"/Users/petrsugar/git/coding_challenge/src/generator/utils/randomInt.ts",[],"/Users/petrsugar/git/coding_challenge/src/generator/utils/generateGuid.ts",[],"/Users/petrsugar/git/coding_challenge/src/components/Loader.tsx",[],"/Users/petrsugar/git/coding_challenge/src/components/TimeLine/utils/index.ts",[],"/Users/petrsugar/git/coding_challenge/src/api/fetchEvents.ts",["121","122"],"/Users/petrsugar/git/coding_challenge/src/utils/index.ts",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":3,"column":10,"nodeType":"133","messageId":"134","endLine":3,"endColumn":56,"fix":"135"},{"ruleId":"127","severity":1,"message":"136","line":3,"column":35,"nodeType":"129","messageId":"130","endLine":3,"endColumn":56},{"ruleId":"127","severity":1,"message":"137","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":17},{"ruleId":"127","severity":1,"message":"138","line":1,"column":42,"nodeType":"129","messageId":"130","endLine":1,"endColumn":49},{"ruleId":"127","severity":1,"message":"139","line":5,"column":16,"nodeType":"129","messageId":"130","endLine":5,"endColumn":21},{"ruleId":"127","severity":1,"message":"136","line":8,"column":10,"nodeType":"129","messageId":"130","endLine":8,"endColumn":31},{"ruleId":"140","severity":1,"message":"141","line":43,"column":6,"nodeType":"142","endLine":43,"endColumn":20,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"136","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":31},{"ruleId":"127","severity":1,"message":"144","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":17},{"ruleId":"127","severity":1,"message":"145","line":5,"column":33,"nodeType":"129","messageId":"130","endLine":5,"endColumn":44},{"ruleId":"127","severity":1,"message":"146","line":5,"column":46,"nodeType":"129","messageId":"130","endLine":5,"endColumn":56},{"ruleId":"127","severity":1,"message":"147","line":1,"column":19,"nodeType":"129","messageId":"130","endLine":1,"endColumn":23},{"ruleId":"140","severity":1,"message":"148","line":36,"column":6,"nodeType":"142","endLine":36,"endColumn":23,"suggestions":"149"},{"ruleId":"127","severity":1,"message":"150","line":1,"column":8,"nodeType":"129","messageId":"130","endLine":1,"endColumn":13},{"ruleId":"127","severity":1,"message":"151","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":19},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"@typescript-eslint/no-unused-vars","'generateEvents' is defined but never used.","Identifier","unusedVar","no-useless-rename","Import MINUTE_TO_PIXEL_RATIO unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"154","text":"155"},"'MINUTE_TO_PIXEL_RATIO' is defined but never used.","'msToMin' is defined but never used.","'useMemo' is defined but never used.","'first' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'timeLineStart'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'TextField' is defined but never used.","'useCallback' is defined but never used.","'useContext' is defined but never used.","'last' is defined but never used.","React Hook useEffect has a missing dependency: 'filterEventsByName'. Either include it or remove the dependency array.",["157"],"'axios' is defined but never used.","'TimeEvent' is defined but never used.","no-global-assign","no-unsafe-negation",[82,128],"MINUTE_TO_PIXEL_RATIO",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [selectedTime, timeLineStart]",{"range":"162","text":"163"},"Update the dependencies array to be: [filterEventsByName, nameFilterValue]",{"range":"164","text":"165"},[1403,1417],"[selectedTime, timeLineStart]",[1390,1407],"[filterEventsByName, nameFilterValue]"]